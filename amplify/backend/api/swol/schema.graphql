# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type Muscle @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  exercises: [Exercise] @manyToMany(relationName: "MuscleExercises")
}

type Exercise @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  muscles: [Muscle] @manyToMany(relationName: "MuscleExercises")
  workouts: [Workout] @manyToMany(relationName: "WorkoutExercises")
  increment: Int!
  timePerRep: Int
  lottie: String!
  difficulty: Int!
  hasWeight: Boolean!
}

type Workout @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  imageUrl: String!
  exercises: [Exercise] @manyToMany(relationName: "WorkoutExercises")
  reps: [Int]
  sets: [Int]
  rests: [Int]
  nameLower: String!
  percents: [Float]
  difficulty: Int
}

type MyExercise @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  exercise: Exercise @hasOne
  rating: Int
  weight: Int
  maxweight: Int
}


type MyWorkout @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  workout: Workout @hasOne
  rating: Int
  completedTimes: Int
}

type Profile @model @auth(rules: [{allow: private , ownerField: "ownerId"}]) {
  id: ID!
  username: String! 
  ownerId: ID! @index
  incomingRequests: [FriendRequest] @hasMany
  outgoingRequests: [FriendRequest] @hasMany
  posts: [Post] @hasMany
  imageUrl: String
  experience: Int
  gym: Gym @hasOne
  streak: Int
  thisWeekTime: [Int]
}

type GymWeeklyAttendance @model @auth(rules: [{allow: owner}]) {
  id: ID!
  weekStart: AWSDateTime!
  weekTime: [Int]
}

type Gym @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String
  rating: Float,
  ratingTotal: Int,
  address: String,
  phone: String,
  isRegistered: Boolean, 
  demandNumber: Int,
  profiles: [Profile] @hasMany
}

type FriendRequest @model @auth(rules: [{ allow: private }]) {
  id: ID!
  profileOutgoingRequestsId: ID!
  profileIncomingRequestsId: ID!
  sender: Profile! @belongsTo(fields: ["profileOutgoingRequestsId"])
  receiver: Profile! @belongsTo(fields: ["profileIncomingRequestsId"])
  accepted: Boolean!
}

type Post @model @auth(rules: [{ allow: private }]) {
  id: ID!
  imageUrl: String
  author: Profile! @belongsTo
  postKind: String!
  text: String!
  type: String!
    @index(
      name: "postsByDate"
      queryField: "postsByDate"
      sortKeyFields: ["createdAt"]
    )
  createdAt: String!
}
